
Portable Motorola 6800 Assembler [17.08]

                            ;===============================================================================
                            ; __        __              _ _
                            ; \ \      / /__  _____   _(_) |
                            ;  \ \ /\ / / _ \/ _ \ \ / / | |
                            ;   \ V  V /  __/  __/\ V /| | |
                            ;    \_/\_/ \___|\___| \_/ |_|_|
                            ;
                            ; A New 6800 Monitor
                            ;-------------------------------------------------------------------------------
                            ; Copyright (C)2014-2017 HandCoded Software Ltd.
                            ; All rights reserved.
                            ;
                            ; This work is made available under the terms of the Creative Commons
                            ; Attribution-NonCommercial 2.0 license. Open the following URL to see the
                            ; details.
                            ;
                            ; http://creativecommons.org/licenses/by-nc/2.0/
                            ;-------------------------------------------------------------------------------
                            ;
                            ; Notes:
                            ;
                            ; Weevil is a new boot monitor for the 6800 that follows in the steps of HUMBUG
                            ; by combining MIKBUG/SWTBUG compatibility with a new memory layout and command
                            ; set.
                            ;
                            ; Weevil has been designed to work on the EM-RETRO 6800 emulator
                            ;
                            ;===============================================================================
                            ; Revision History:
                            ;
                            ; 2015-01-02 AJ Initial version
                            ;-------------------------------------------------------------------------------
                            
                                            .include "../em-6800.inc"
                                            .list
                            ;===============================================================================
                            ; Pseudo Operations and Flags
                            ;-------------------------------------------------------------------------------
                            
                            ; Pseudo Operations
                            
        00000000          = CMD_IFR         .equ    0
        00000001          = CMD_IFW         .equ    1
        00000002          = CMD_IER         .equ    2
        00000003          = CMD_IEW         .equ    3
        00000004          = CMD_TXD         .equ    4
        00000005          = CMD_RXD         .equ    5
        00000006          = CMD_CLR         .equ    6
                                            
                            ; Interrupt flag masks
                            
        00000001          = INT_100HZ       .equ    1<<0
        00000002          = INT_UART_RX     .equ    1<<1
        00000004          = INT_UART_TX     .equ    1<<2

Portable Motorola 6800 Assembler [17.08]

                            
                            ;===============================================================================
                            ; Macros for Pseudo Instructions
                            ;-------------------------------------------------------------------------------
                            
                            SYS_A           .macro  CMD
                                            .byte   $8F,CMD
                                            .endm
                                            
                            SYS_B           .macro  CMD
                                            .byte   $CF,CMD
                                            .endm
                            
                            ;===============================================================================
                            ; Constants
                            ;===============================================================================
                            
                            ; ASCII Control Codes
                            
        00000004          = EOT             .equ    $04
        0000000A          = LF              .equ    $0a
        0000000D          = CR              .equ    $0d
                            
                            ; Opcode Indexes
                            
        00000000          = OP_ERR          .equ    0
        00000003          = OP_ABA          .equ    3
        00000006          = OP_ADC          .equ    6
        00000009          = OP_ADD          .equ    9
        0000000C          = OP_AND          .equ    12
        0000000F          = OP_ASL          .equ    15
        00000012          = OP_ASR          .equ    18
        00000015          = OP_BCC          .equ    21
        00000018          = OP_BCS          .equ    24
        0000001B          = OP_BEQ          .equ    27
        0000001E          = OP_BGE          .equ    30
        00000021          = OP_BGT          .equ    33
        00000024          = OP_BIT          .equ    36
        00000027          = OP_BHI          .equ    39
        0000002A          = OP_BLE          .equ    42
        0000002D          = OP_BLS          .equ    45
        00000030          = OP_BLT          .equ    48
        00000033          = OP_BMI          .equ    51
        00000036          = OP_BNE          .equ    54
        00000039          = OP_BPL          .equ    57
        0000003C          = OP_BRA          .equ    60
        0000003F          = OP_BSR          .equ    63
        00000042          = OP_BVC          .equ    66
        00000045          = OP_BVS          .equ    69
        00000048          = OP_CBA          .equ    72
        0000004B          = OP_CLC          .equ    75
        0000004E          = OP_CLI          .equ    78
        00000051          = OP_CLR          .equ    81
        00000054          = OP_CLV          .equ    84

Portable Motorola 6800 Assembler [17.08]

        00000057          = OP_CMP          .equ    87
        0000005A          = OP_COM          .equ    90
        0000005D          = OP_CPX          .equ    93
        00000060          = OP_DAA          .equ    96
        00000063          = OP_DEC          .equ    99
        00000066          = OP_DES          .equ    102
        00000069          = OP_DEX          .equ    105
        0000006C          = OP_EOR          .equ    108
        0000006F          = OP_INC          .equ    111
        00000072          = OP_INS          .equ    114
        00000075          = OP_INX          .equ    117
        00000078          = OP_JMP          .equ    120
        0000007B          = OP_JSR          .equ    123
        0000007E          = OP_LDA          .equ    126
        00000081          = OP_LDS          .equ    129
        00000084          = OP_LDX          .equ    132
        00000087          = OP_LSR          .equ    135
        0000008A          = OP_NEG          .equ    138
        0000008D          = OP_NOP          .equ    141
        00000090          = OP_ORA          .equ    144
        00000093          = OP_PSH          .equ    147
        00000096          = OP_PUL          .equ    150
        00000099          = OP_ROL          .equ    153
        0000009C          = OP_ROR          .equ    156
        0000009F          = OP_RTI          .equ    159
        000000A2          = OP_RTS          .equ    162
        000000A5          = OP_SBA          .equ    165
        000000A8          = OP_SBC          .equ    168
        000000AB          = OP_SEC          .equ    171
        000000AE          = OP_SEI          .equ    174
        000000B1          = OP_SEV          .equ    177
        000000B4          = OP_STA          .equ    180
        000000B7          = OP_STS          .equ    183
        000000BA          = OP_STX          .equ    186
        000000BD          = OP_SUB          .equ    189
        000000C0          = OP_SWI          .equ    192
        000000C3          = OP_TAB          .equ    195
        000000C6          = OP_TAP          .equ    198
        000000C9          = OP_TBA          .equ    201
        000000CC          = OP_TPA          .equ    204
        000000CF          = OP_TST          .equ    207
        000000D2          = OP_TSX          .equ    210
        000000D5          = OP_TXS          .equ    213
        000000D8          = OP_WAI          .equ    216
        000000DB          = OP_SYS          .equ    219
                            
        00000040          = AM_A            .equ    $40
        00000080          = AM_B            .equ    $80
                            
        00000000          = AM_INH          .equ    $00
        00000001          = AM_DPG          .equ    $01
        00000011          = AM_IDX          .equ    $11
        00000021          = AM_REL          .equ    $21
        00000031          = AM_IMB          .equ    $31

Portable Motorola 6800 Assembler [17.08]

        00000002          = AM_IMW          .equ    $02
        00000012          = AM_EXT          .equ    $12
                            
                            ;===============================================================================
                            ; Data Areas
                            ;-------------------------------------------------------------------------------
                            
                                            .bss
                                            .org    $a000
                            
00A000  0000              : IRQV:           .space  2
00A002  0000              : NMIV:           .space  2
00A004  0000              : SWIV:           .space  2
                            
00A006  0000              : SP:             .space  2
00A008  0000              : MPTR:           .space  2
00A00A  00                : OPCODE:         .space  1
00A00B  00                : MODE:           .space  1
00A00C  0000              : TEMP:           .space  2
                            
00A00E  0000000000000000> :                 .space  32
                            STACK:
                            
                            ;===============================================================================
                            ; Interrupt Handlers
                            ;-------------------------------------------------------------------------------
                            
                                            .code
                                            .org    $e000
                            
                            IRQ:
00E000  FEA000            :                 ldx     IRQV            ; Indirect through vector
00E003  6E00              :                 jmp     0,x
                            
                            NMI:
00E005  FEA002            :                 ldx     NMIV            ; Indirect through vector
00E008  6E00              :                 jmp     0,x
                            
                            SWI:
00E00A  FEA004            :                 ldx     SWIV            ; Indirect through vector
00E00D  6E00              :                 jmp     0,x
                            
                            ;-------------------------------------------------------------------------------
                            
                                            .org    $e067           ; MikBug OUTHL
                            OutHexHi:
00E067  44                :                 lsr a
00E068  44                :                 lsr a
00E069  44                :                 lsr a
00E06A  44                :                 lsr a
                            
                                            .org    $e06b           ; MikBug OUTHR
                            OutHexLo:
00E06B  840F              :                 and a   #$0f

Portable Motorola 6800 Assembler [17.08]

00E06D  8A30              :                 ora a   #'0'
00E06F  8139              :                 cmp a   #'9'
00E071  2302              :                 bls     OutChar
00E073  8B07              :                 add a   #7
                            
                                            .org    $e075           ; MikBug OUTCH & INCH
00E075  7EE562            : OutChar         jmp     UartTx
00E078  7EE56D            : InChar          jmp     UartRx
                            
                            
                                            .org    $e07b           ; MikBug PDATA1
                            OutStrLoop:
00E07B  8DF8              :                 bsr     OutChar
00E07D  08                :                 inx
                            OutStr:
00E07E  A600              :                 lda a   0,x
00E080  8104              :                 cmp a   #EOT
00E082  26F7              :                 bne     OutStrLoop
00E084  39                :                 rts
                            
                            ;===============================================================================
                            ; Power On Reset
                            ;-------------------------------------------------------------------------------
                            
                                            .org    $e400
                            RESET:
00E400  0F                :                 sei                     ; Ensure interrupts are disabled
00E401  8EA02E            :                 lds     #STACK
00E404  CEE41C            :                 ldx     #DummyHandler
00E407  FFA002            :                 stx     NMIV
00E40A  FFA000            :                 stx     IRQV
00E40D  CEE539            :                 ldx     #DebugHandler
00E410  FFA004            :                 stx     SWIV
                            
00E413  CEFFDE            :                 ldx     #SPLASH
00E416  BDE07E            :                 jsr     OutStr
                            
00E419  3F                : .Loop           swi                     ; Enter the debugger
00E41A  20FD              :                 bra     .Loop
                            
                            DummyHandler:
00E41C  3B                :                 rti
                            
                            ;===============================================================================
                            ; Output Utilities
                            ;-------------------------------------------------------------------------------
                            
                            ; Fetch the PC from the stack and display it in hex. Save its value in the
                            ; memory pointer to allow subsequent byte and opcode display.
                            
                            ShowPC:
00E41D  FEA006            :                 ldx     SP              ; Handle the PC MSB
00E420  A606              :                 lda a   6,x
00E422  B7A008            :                 sta a   MPTR+0

Portable Motorola 6800 Assembler [17.08]

00E425  8D73              :                 bsr     OutHex2 
00E427  A607              :                 lda a   7,x             ; .. the the PC LSB
00E429  B7A009            :                 sta a   MPTR+1
00E42C  206C              :                 bra     OutHex2
                            
                            ; Fetch the status register from the stack and then display its value as
                            ; individual bits.
                            
                            ShowP:
00E42E  CEE524            :                 ldx     #P_STR
00E431  BDE07E            :                 jsr     OutStr
00E434  FEA006            :                 ldx     SP
00E437  E601              :                 lda b   1,x
00E439  8631              :                 lda a   #'1'
00E43B  8D1A              :                 bsr     ShowBit
00E43D  8631              :                 lda a   #'1'
00E43F  8D16              :                 bsr     ShowBit
00E441  8648              :                 lda a   #'H'
00E443  8D12              :                 bsr     ShowBit
00E445  8649              :                 lda a   #'I'
00E447  8D0E              :                 bsr     ShowBit
00E449  864E              :                 lda a   #'N'
00E44B  8D0A              :                 bsr     ShowBit
00E44D  865A              :                 lda a   #'Z'
00E44F  8D06              :                 bsr     ShowBit
00E451  8656              :                 lda a   #'V'
00E453  8D02              :                 bsr     ShowBit
00E455  8643              :                 lda a   #'C'
                            
                            ; Rotate a bit out of the status register in B. If it is clear the change the
                            ; flag character to a full stop.
                            
                            ShowBit:
00E457  59                :                 rol b
00E458  2502              :                 bcs     .Skip
00E45A  862E              :                 lda a   #'.'
00E45C  7EE562            : .Skip           jmp     UartTx
                            
                            ShowA:
00E45F  CEE528            :                 ldx     #A_STR
00E462  BDE07E            :                 jsr     OutStr
00E465  FEA006            :                 ldx     SP
00E468  A603              :                 lda a   3,x
00E46A  202E              :                 bra     OutHex2
                            
                            ShowB:
00E46C  CEE52C            :                 ldx     #B_STR
00E46F  BDE07E            :                 jsr     OutStr
00E472  FEA006            :                 ldx     SP
00E475  A602              :                 lda a   2,x
00E477  2021              :                 bra     OutHex2
                            
                            ShowX:
00E479  CEE530            :                 ldx     #X_STR

Portable Motorola 6800 Assembler [17.08]

00E47C  BDE07E            :                 jsr     OutStr
00E47F  FEA006            :                 ldx     SP
00E482  A604              :                 lda a   4,x
00E484  8D14              :                 bsr     OutHex2
00E486  A605              :                 lda a   5,x
00E488  2010              :                 bra     OutHex2
                            
                            ShowSP:
00E48A  CEE534            :                 ldx     #SP_STR
00E48D  BDE07E            :                 jsr     OutStr
00E490  B6A006            :                 lda a   SP+0
00E493  8D05              :                 bsr     OutHex2
00E495  B6A007            :                 lda a   SP+1
00E498  2000              :                 bra     OutHex2
                            
                            OutHex2:
00E49A  36                :                 psh a
00E49B  BDE067            :                 jsr     OutHexHi
00E49E  32                :                 pul a
00E49F  7EE06B            :                 jmp     OutHexLo
                            
                            FetchOpcode:
00E4A2  FEA008            :                 ldx     MPTR            ; Fetch the target opcode
00E4A5  C6FD              :                 lda b   #>OPCODES       ; And calculate description address
00E4A7  A600              :                 lda a   0,x
00E4A9  48                :                 asl a
00E4AA  2401              :                 bcc     .Skip
00E4AC  5C                :                 inc b
00E4AD  F7A00C            : .Skip           sta b   TEMP+0          ; Load into X
00E4B0  B7A00D            :                 sta a   TEMP+1
00E4B3  FEA00C            :                 ldx     TEMP
00E4B6  A600              :                 lda a   0,x             ; And fetch the description
00E4B8  B7A00A            :                 sta a   OPCODE
00E4BB  A601              :                 lda a   1,x
00E4BD  B7A00B            :                 sta a   MODE
00E4C0  39                :                 rts
                            
                            ShowBytes:
00E4C1  FEA008            :                 ldx     MPTR
00E4C4  F6A00B            :                 lda b   MODE
00E4C7  C403              :                 and b   #$03
00E4C9  8D1C              :                 bsr     Space
00E4CB  A600              :                 lda a   0,x
00E4CD  8DCB              :                 bsr     OutHex2
00E4CF  5A                :                 dec b
00E4D0  2B0F              :                 bmi     .Blank2
00E4D2  8D13              :                 bsr     Space
00E4D4  A601              :                 lda a   1,x
00E4D6  8DC2              :                 bsr     OutHex2
00E4D8  5A                :                 dec b
00E4D9  2B08              :                 bmi     .Blank1
00E4DB  8D0A              :                 bsr     Space
00E4DD  A602              :                 lda a   2,x
00E4DF  20B9              :                 bra     OutHex2

Portable Motorola 6800 Assembler [17.08]

                                            
00E4E1  8D00              : .Blank2:        bsr     .Blank1
00E4E3  8D02              : .Blank1:        bsr     Space
00E4E5  8D00              :                 bsr     Space
                            
                            Space:
00E4E7  8620              :                 lda a   #' '
00E4E9  7EE562            :                 jmp     UartTx
                            
                            ShowOpcode:
00E4EC  C6FF              :                 lda b   #>MNEMONICS     ; Work out mnemonic address
00E4EE  8600              :                 lda a   #<MNEMONICS
00E4F0  BBA00A            :                 add a   OPCODE
00E4F3  F7A00C            :                 sta b   TEMP+0          ; And transfer to X
00E4F6  B7A00D            :                 sta a   TEMP+1
00E4F9  FEA00C            :                 ldx     TEMP
00E4FC  8DE9              :                 bsr     Space           ; Output initial space
00E4FE  A600              :                 lda a   0,x             ; Then the opcode
00E500  BDE562            :                 jsr     UartTx
00E503  A601              :                 lda a   1,x
00E505  BDE562            :                 jsr     UartTx
00E508  A602              :                 lda a   2,x
00E50A  BDE562            :                 jsr     UartTx
00E50D  8DD8              :                 bsr     Space           ; Another space
00E50F  8620              :                 lda a   #' '
00E511  F6A00B            :                 lda b   MODE            ; Display accumulator (if any)
00E514  C540              :                 bit b   #AM_A
00E516  2702              :                 beq     .SkipA
00E518  8641              :                 lda a   #'A'
00E51A  C580              : .SkipA          bit b   #AM_B
00E51C  2702              :                 beq     .SkipB
00E51E  8642              :                 lda a   #'B'
00E520  BDE562            : .SkipB          jsr     UartTx
                                            
                                            
                                            
00E523  39                :                 rts
                            
                            
                            ;===============================================================================
                            ; Software Interrupt
                            ;-------------------------------------------------------------------------------
                            
00E524  20503D04          : P_STR           .byte   " P=",EOT
00E528  20413D04          : A_STR:          .byte   " A=",EOT
00E52C  20423D04          : B_STR           .byte   " B=",EOT
00E530  20583D04          : X_STR           .byte   " X=",EOT
00E534  2053503D04        : SP_STR          .byte   " SP=",EOT
                            
                            ; SP => | +0 | <next slot>
                            ;       | +1 | CCR
                            ;       | +2 | ACCB
                            ;       | +3 | ACCA
                            ;       | +4 | XH

Portable Motorola 6800 Assembler [17.08]

                            ;       | +5 | XL
                            ;       | +6 | PCH
                            ;       | +7 | PCL
                            
                            DebugHandler:
00E539  BFA006            :                 sts     SP              ; Save users SP
00E53C  30                :                 tsx
00E53D  6D06              :                 tst     6,x             ; Decrement PC
00E53F  2602              :                 bne     .Skip
00E541  6A05              :                 dec     5,x
00E543  6A06              : .Skip           dec     6,x
                            
                            ShowRegisters:
00E545  BDE41D            :                 jsr     ShowPC
00E548  BDE4A2            :                 jsr     FetchOpcode
00E54B  BDE4C1            :                 jsr     ShowBytes
00E54E  BDE4EC            :                 jsr     ShowOpcode
00E551  BDE45F            :                 jsr     ShowA
00E554  BDE46C            :                 jsr     ShowB
00E557  BDE479            :                 jsr     ShowX
00E55A  BDE42E            :                 jsr     ShowP
00E55D  BDE48A            :                 jsr     ShowSP
                                            
00E560  20FE              :                 bra     $
                            
                            ;===============================================================================
                            ; I/O Routines
                            ;-------------------------------------------------------------------------------
                            
                            UartTx:
00E562  36                :                 psh a
                            .Wait           SYS_A   CMD_IFR
00E563  8F00              +                 .byte   $8F,CMD_IFR
00E565  8404              :                 and a   #INT_UART_TX
00E567  27FA              :                 beq     .Wait
00E569  32                :                 pul a
                                            SYS_A   CMD_TXD
00E56A  8F04              +                 .byte   $8F,CMD_TXD
00E56C  39                :                 rts
                            
                            UartRx:
                                            SYS_A   CMD_IFR
00E56D  8F00              +                 .byte   $8F,CMD_IFR
00E56F  8402              :                 and a   #INT_UART_RX
00E571  26FA              :                 bne     UartRx
                                            SYS_A   CMD_RXD
00E573  8F05              +                 .byte   $8F,CMD_RXD
00E575  39                :                 rts
                            
                            ;===============================================================================
                            ;-------------------------------------------------------------------------------
                            
                                            .org    $fd00
                            OPCODES:

Portable Motorola 6800 Assembler [17.08]

00FD00  0000              :                 .byte   OP_ERR,     AM_INH      ; 00 -
00FD02  8D00              :                 .byte   OP_NOP,     AM_INH      ; 01 - NOP
00FD04  0000              :                 .byte   OP_ERR,     AM_INH      ; 02 -
00FD06  0000              :                 .byte   OP_ERR,     AM_INH      ; 03 -
00FD08  0000              :                 .byte   OP_ERR,     AM_INH      ; 04 -
00FD0A  0000              :                 .byte   OP_ERR,     AM_INH      ; 05 -
00FD0C  C600              :                 .byte   OP_TAP,     AM_INH      ; 06 - TAP
00FD0E  CC00              :                 .byte   OP_TPA,     AM_INH      ; 07 - TPA
00FD10  7500              :                 .byte   OP_INX,     AM_INH      ; 08 - INX
00FD12  6900              :                 .byte   OP_DEX,     AM_INH      ; 09 - DEX
00FD14  5400              :                 .byte   OP_CLV,     AM_INH      ; 0a - CLV
00FD16  B100              :                 .byte   OP_SEV,     AM_INH      ; 0b - SEV
00FD18  4B00              :                 .byte   OP_CLC,     AM_INH      ; 0c - CLC
00FD1A  AB00              :                 .byte   OP_SEC,     AM_INH      ; 0d - SEC
00FD1C  4E00              :                 .byte   OP_CLI,     AM_INH      ; 0e - CLI
00FD1E  AE00              :                 .byte   OP_SEI,     AM_INH      ; 0f - SEI
                            
00FD20  A500              :                 .byte   OP_SBA,     AM_INH      ; 10 - SBA
00FD22  4800              :                 .byte   OP_CBA,     AM_INH      ; 11 - CBA
00FD24  0000              :                 .byte   OP_ERR,     AM_INH      ; 12 -
00FD26  0000              :                 .byte   OP_ERR,     AM_INH      ; 13 -
00FD28  0000              :                 .byte   OP_ERR,     AM_INH      ; 14 -
00FD2A  0000              :                 .byte   OP_ERR,     AM_INH      ; 15 -
00FD2C  C300              :                 .byte   OP_TAB,     AM_INH      ; 16 - TAB
00FD2E  C900              :                 .byte   OP_TBA,     AM_INH      ; 17 - TBA
00FD30  0000              :                 .byte   OP_ERR,     AM_INH      ; 18 -
00FD32  6000              :                 .byte   OP_DAA,     AM_INH      ; 19 - DAA
00FD34  0000              :                 .byte   OP_ERR,     AM_INH      ; 1a -
00FD36  0300              :                 .byte   OP_ABA,     AM_INH      ; 1b - ABA
00FD38  0000              :                 .byte   OP_ERR,     AM_INH      ; 1c -
00FD3A  0000              :                 .byte   OP_ERR,     AM_INH      ; 1d -
00FD3C  0000              :                 .byte   OP_ERR,     AM_INH      ; 1e -
00FD3E  0000              :                 .byte   OP_ERR,     AM_INH      ; 1f -
                            
00FD40  3C21              :                 .byte   OP_BRA,     AM_REL      ; 20 - BRA rel
00FD42  0000              :                 .byte   OP_ERR,     AM_INH      ; 21 -
00FD44  2721              :                 .byte   OP_BHI,     AM_REL      ; 22 - BHI rel
00FD46  2D21              :                 .byte   OP_BLS,     AM_REL      ; 23 - BLS rel
00FD48  1521              :                 .byte   OP_BCC,     AM_REL      ; 24 - BCC rel
00FD4A  1821              :                 .byte   OP_BCS,     AM_REL      ; 25 - BCS rel
00FD4C  3621              :                 .byte   OP_BNE,     AM_REL      ; 26 - BNE rel
00FD4E  1B21              :                 .byte   OP_BEQ,     AM_REL      ; 27 - BEQ rel
00FD50  4221              :                 .byte   OP_BVC,     AM_REL      ; 28 - BVC rel
00FD52  4521              :                 .byte   OP_BVS,     AM_REL      ; 29 - BVS rel
00FD54  3921              :                 .byte   OP_BPL,     AM_REL      ; 2a - BPL rel
00FD56  3321              :                 .byte   OP_BMI,     AM_REL      ; 2b - BMI rel
00FD58  1E21              :                 .byte   OP_BGE,     AM_REL      ; 2c - BGE rel
00FD5A  3021              :                 .byte   OP_BLT,     AM_REL      ; 2d - BLT rel
00FD5C  2121              :                 .byte   OP_BGT,     AM_REL      ; 2e - BGT rel
00FD5E  2A21              :                 .byte   OP_BLE,     AM_REL      ; 2f - BLE rel
                            
00FD60  D200              :                 .byte   OP_TSX,     AM_INH      ; 30 - TSX
00FD62  7200              :                 .byte   OP_INS,     AM_INH      ; 31 - INS
00FD64  9640              :                 .byte   OP_PUL,AM_A|AM_INH      ; 32 - PUL A

Portable Motorola 6800 Assembler [17.08]

00FD66  9680              :                 .byte   OP_PUL,AM_B|AM_INH      ; 33 - PUL B
00FD68  6600              :                 .byte   OP_DES,     AM_INH      ; 34 - DES
00FD6A  D500              :                 .byte   OP_TXS,     AM_INH      ; 35 - TXS
00FD6C  9340              :                 .byte   OP_PSH,AM_A|AM_INH      ; 36 - PSH A
00FD6E  9380              :                 .byte   OP_PSH,AM_B|AM_INH      ; 37 - PSH B
00FD70  0000              :                 .byte   OP_ERR,     AM_INH      ; 38 -
00FD72  A200              :                 .byte   OP_RTS,     AM_INH      ; 39 - RTS
00FD74  0000              :                 .byte   OP_ERR,     AM_INH      ; 3a -
00FD76  9F00              :                 .byte   OP_RTI,     AM_INH      ; 3b - RTI
00FD78  0000              :                 .byte   OP_ERR,     AM_INH      ; 3c -
00FD7A  0000              :                 .byte   OP_ERR,     AM_INH      ; 3d -
00FD7C  D800              :                 .byte   OP_WAI,     AM_INH      ; 3e - WAI
00FD7E  C000              :                 .byte   OP_SWI,     AM_INH      ; 3f - SWI
                            
00FD80  8A40              :                 .byte   OP_NEG,AM_A|AM_INH      ; 40 - NEG A
00FD82  0000              :                 .byte   OP_ERR,     AM_INH      ; 41 -
00FD84  0000              :                 .byte   OP_ERR,     AM_INH      ; 42 -
00FD86  5A40              :                 .byte   OP_COM,AM_A|AM_INH      ; 43 - COM A
00FD88  8740              :                 .byte   OP_LSR,AM_A|AM_INH      ; 44 - LSR A
00FD8A  0000              :                 .byte   OP_ERR,     AM_INH      ; 45 -
00FD8C  9C40              :                 .byte   OP_ROR,AM_A|AM_INH      ; 46 - ROR A
00FD8E  1240              :                 .byte   OP_ASR,AM_A|AM_INH      ; 47 - ASR A
00FD90  0F40              :                 .byte   OP_ASL,AM_A|AM_INH      ; 48 - ASL A
00FD92  9940              :                 .byte   OP_ROL,AM_A|AM_INH      ; 49 - ROL A
00FD94  6340              :                 .byte   OP_DEC,AM_A|AM_INH      ; 4a - DEC A
00FD96  0000              :                 .byte   OP_ERR,     AM_INH      ; 4b -
00FD98  6F40              :                 .byte   OP_INC,AM_A|AM_INH      ; 4c - INC A
00FD9A  CF40              :                 .byte   OP_TST,AM_A|AM_INH      ; 4d - TST A
00FD9C  0000              :                 .byte   OP_ERR,     AM_INH      ; 4e -
00FD9E  5140              :                 .byte   OP_CLR,AM_A|AM_INH      ; 4f - CLR A
                            
00FDA0  8A80              :                 .byte   OP_NEG,AM_B|AM_INH      ; 50 - NEG B
00FDA2  0000              :                 .byte   OP_ERR,     AM_INH      ; 51 -
00FDA4  0000              :                 .byte   OP_ERR,     AM_INH      ; 52 -
00FDA6  5A80              :                 .byte   OP_COM,AM_B|AM_INH      ; 53 - COM B
00FDA8  8780              :                 .byte   OP_LSR,AM_B|AM_INH      ; 54 - LSR B
00FDAA  0000              :                 .byte   OP_ERR,     AM_INH      ; 55 -
00FDAC  9C80              :                 .byte   OP_ROR,AM_B|AM_INH      ; 56 - ROR B
00FDAE  1280              :                 .byte   OP_ASR,AM_B|AM_INH      ; 57 - ASR B
00FDB0  0F80              :                 .byte   OP_ASL,AM_B|AM_INH      ; 58 - ASL B
00FDB2  9980              :                 .byte   OP_ROL,AM_B|AM_INH      ; 59 - ROL B
00FDB4  6380              :                 .byte   OP_DEC,AM_B|AM_INH      ; 5a - DEC B
00FDB6  0000              :                 .byte   OP_ERR,     AM_INH      ; 5b -
00FDB8  6F80              :                 .byte   OP_INC,AM_B|AM_INH      ; 5c - INC B
00FDBA  CF80              :                 .byte   OP_TST,AM_B|AM_INH      ; 5d - TST B
00FDBC  0000              :                 .byte   OP_ERR,     AM_INH      ; 5e -
00FDBE  5180              :                 .byte   OP_CLR,AM_B|AM_INH      ; 5f - CLR B
                            
00FDC0  8A11              :                 .byte   OP_NEG,     AM_IDX      ; 60 - NEG idx,X
00FDC2  0000              :                 .byte   OP_ERR,     AM_INH      ; 61 -
00FDC4  0000              :                 .byte   OP_ERR,     AM_INH      ; 62 -
00FDC6  5A11              :                 .byte   OP_COM,     AM_IDX      ; 63 - COM idx,X
00FDC8  8711              :                 .byte   OP_LSR,     AM_IDX      ; 64 - LSR idx,X
00FDCA  0000              :                 .byte   OP_ERR,     AM_INH      ; 65 -

Portable Motorola 6800 Assembler [17.08]

00FDCC  9C11              :                 .byte   OP_ROR,     AM_IDX      ; 66 - ROR idx,X
00FDCE  1211              :                 .byte   OP_ASR,     AM_IDX      ; 67 - ASR idx,X
00FDD0  0F11              :                 .byte   OP_ASL,     AM_IDX      ; 68 - ASL idx,X
00FDD2  9911              :                 .byte   OP_ROL,     AM_IDX      ; 69 - ROL idx,X
00FDD4  6311              :                 .byte   OP_DEC,     AM_IDX      ; 6a - DEC idx,X
00FDD6  0000              :                 .byte   OP_ERR,     AM_INH      ; 6b -
00FDD8  6F11              :                 .byte   OP_INC,     AM_IDX      ; 6c - INC idx,X
00FDDA  CF11              :                 .byte   OP_TST,     AM_IDX      ; 6d - TST idx,X
00FDDC  7811              :                 .byte   OP_JMP,     AM_IDX      ; 6e - JMP idx,X
00FDDE  5111              :                 .byte   OP_CLR,     AM_IDX      ; 6f - CLR idx,X
                            
00FDE0  8A12              :                 .byte   OP_NEG,     AM_EXT      ; 70 - NEG ext
00FDE2  0000              :                 .byte   OP_ERR,     AM_INH      ; 71 -
00FDE4  0000              :                 .byte   OP_ERR,     AM_INH      ; 72 -
00FDE6  5A12              :                 .byte   OP_COM,     AM_EXT      ; 73 - COM ext
00FDE8  8712              :                 .byte   OP_LSR,     AM_EXT      ; 74 - LSR ext
00FDEA  0000              :                 .byte   OP_ERR,     AM_INH      ; 75 -
00FDEC  9C12              :                 .byte   OP_ROR,     AM_EXT      ; 76 - ROR ext
00FDEE  1212              :                 .byte   OP_ASR,     AM_EXT      ; 77 - ASR ext
00FDF0  0F12              :                 .byte   OP_ASL,     AM_EXT      ; 78 - ASL ext
00FDF2  9912              :                 .byte   OP_ROL,     AM_EXT      ; 79 - ROL ext
00FDF4  6312              :                 .byte   OP_DEC,     AM_EXT      ; 7a - DEC ext
00FDF6  0000              :                 .byte   OP_ERR,     AM_INH      ; 7b -
00FDF8  6F12              :                 .byte   OP_INC,     AM_EXT      ; 7c - INC ext
00FDFA  CF12              :                 .byte   OP_TST,     AM_EXT      ; 7d - TST ext
00FDFC  7812              :                 .byte   OP_JMP,     AM_EXT      ; 7e - JMP ext
00FDFE  5112              :                 .byte   OP_CLR,     AM_EXT      ; 7f - CLR ext
                            
00FE00  BD71              :                 .byte   OP_SUB,AM_A|AM_IMB      ; 80 - SUB A #imm
00FE02  5771              :                 .byte   OP_CMP,AM_A|AM_IMB      ; 81 - CMP A #imm
00FE04  A871              :                 .byte   OP_SBC,AM_A|AM_IMB      ; 82 - SBC A #imm
00FE06  0000              :                 .byte   OP_ERR,     AM_INH      ; 83 -
00FE08  0C71              :                 .byte   OP_AND,AM_A|AM_IMB      ; 84 - AND A #imm
00FE0A  2471              :                 .byte   OP_BIT,AM_A|AM_IMB      ; 85 - BIT A #imm
00FE0C  7E71              :                 .byte   OP_LDA,AM_A|AM_IMB      ; 86 - LDA A #imm
00FE0E  0000              :                 .byte   OP_ERR,     AM_INH      ; 87 -
00FE10  6C71              :                 .byte   OP_EOR,AM_A|AM_IMB      ; 88 - EOR A #imm
00FE12  0671              :                 .byte   OP_ADC,AM_A|AM_IMB      ; 89 - ADC A #imm
00FE14  9071              :                 .byte   OP_ORA,AM_A|AM_IMB      ; 8a - ORA A #imm
00FE16  0971              :                 .byte   OP_ADD,AM_A|AM_IMB      ; 8b - ADD A #imm
00FE18  5D02              :                 .byte   OP_CPX,     AM_IMW      ; 8c - CPX #imm
00FE1A  3F21              :                 .byte   OP_BSR,     AM_REL      ; 8d - BSR rel
00FE1C  8102              :                 .byte   OP_LDS,     AM_IMW      ; 8e - LDS #imm
00FE1E  DB71              :                 .byte   OP_SYS,AM_A|AM_IMB      ; 8f - *SYS A #imm
                            
00FE20  BD41              :                 .byte   OP_SUB,AM_A|AM_DPG      ; 90 - SUB A dir
00FE22  5741              :                 .byte   OP_CMP,AM_A|AM_DPG      ; 91 - CMP A dir
00FE24  A841              :                 .byte   OP_SBC,AM_A|AM_DPG      ; 92 - SBC A dir
00FE26  0000              :                 .byte   OP_ERR,     AM_INH      ; 93 -
00FE28  0C41              :                 .byte   OP_AND,AM_A|AM_DPG      ; 94 - AND A dir
00FE2A  2441              :                 .byte   OP_BIT,AM_A|AM_DPG      ; 95 - BIT A dir
00FE2C  7E41              :                 .byte   OP_LDA,AM_A|AM_DPG      ; 96 - LDA A dir
00FE2E  B441              :                 .byte   OP_STA,AM_A|AM_DPG      ; 97 - STA A dir
00FE30  6C41              :                 .byte   OP_EOR,AM_A|AM_DPG      ; 98 - EOR A dir

Portable Motorola 6800 Assembler [17.08]

00FE32  0641              :                 .byte   OP_ADC,AM_A|AM_DPG      ; 99 - ADC A dir
00FE34  9041              :                 .byte   OP_ORA,AM_A|AM_DPG      ; 9a - ORA A dir
00FE36  0941              :                 .byte   OP_ADD,AM_A|AM_DPG      ; 9b - ADD A dir
00FE38  5D01              :                 .byte   OP_CPX,     AM_DPG      ; 9c - CPX dir
00FE3A  0000              :                 .byte   OP_ERR,     AM_INH      ; 9d -
00FE3C  8101              :                 .byte   OP_LDS,     AM_DPG      ; 9e - LDS dir
00FE3E  B701              :                 .byte   OP_STS,     AM_DPG      ; 9f - STS dir
                            
00FE40  BD51              :                 .byte   OP_SUB,AM_A|AM_IDX      ; a0 - SUB A idx,X
00FE42  5751              :                 .byte   OP_CMP,AM_A|AM_IDX      ; a1 - CMP A idx,X
00FE44  A851              :                 .byte   OP_SBC,AM_A|AM_IDX      ; a2 - SBC A idx,X
00FE46  0000              :                 .byte   OP_ERR,     AM_INH      ; a3 -
00FE48  0C51              :                 .byte   OP_AND,AM_A|AM_IDX      ; a4 - AND A idx,X
00FE4A  2451              :                 .byte   OP_BIT,AM_A|AM_IDX      ; a5 - BIT A idx,X
00FE4C  7E51              :                 .byte   OP_LDA,AM_A|AM_IDX      ; a6 - LDA A idx,X
00FE4E  B451              :                 .byte   OP_STA,AM_A|AM_IDX      ; a7 - STA A idx,X
00FE50  6C51              :                 .byte   OP_EOR,AM_A|AM_IDX      ; a8 - EOR A idx,X
00FE52  0651              :                 .byte   OP_ADC,AM_A|AM_IDX      ; a9 - ADC A idx,X
00FE54  9051              :                 .byte   OP_ORA,AM_A|AM_IDX      ; aa - ORA A idx,X
00FE56  0951              :                 .byte   OP_ADD,AM_A|AM_IDX      ; ab - ADD A idx,X
00FE58  5D11              :                 .byte   OP_CPX,     AM_IDX      ; ac - CPX idx,X
00FE5A  7B11              :                 .byte   OP_JSR,     AM_IDX      ; ad - JSR idx,X
00FE5C  8111              :                 .byte   OP_LDS,     AM_IDX      ; ae - LDS idx,X
00FE5E  B711              :                 .byte   OP_STS,     AM_IDX      ; af - STS idx,X
                            
00FE60  BD52              :                 .byte   OP_SUB,AM_A|AM_EXT      ; b0 - SUB A ext
00FE62  5752              :                 .byte   OP_CMP,AM_A|AM_EXT      ; b1 - CMP A ext
00FE64  A852              :                 .byte   OP_SBC,AM_A|AM_EXT      ; b2 - SBC A ext
00FE66  0000              :                 .byte   OP_ERR,     AM_INH      ; b3 -
00FE68  0C52              :                 .byte   OP_AND,AM_A|AM_EXT      ; b4 - AND A ext
00FE6A  2452              :                 .byte   OP_BIT,AM_A|AM_EXT      ; b5 - BIT A ext
00FE6C  7E52              :                 .byte   OP_LDA,AM_A|AM_EXT      ; b6 - LDA A ext
00FE6E  B452              :                 .byte   OP_STA,AM_A|AM_EXT      ; b7 - STA A ext
00FE70  6C52              :                 .byte   OP_EOR,AM_A|AM_EXT      ; b8 - EOR A ext
00FE72  0652              :                 .byte   OP_ADC,AM_A|AM_EXT      ; b9 - ADC A ext
00FE74  9052              :                 .byte   OP_ORA,AM_A|AM_EXT      ; ba - ORA A ext
00FE76  0952              :                 .byte   OP_ADD,AM_A|AM_EXT      ; bb - ADD A ext
00FE78  5D12              :                 .byte   OP_CPX,     AM_EXT      ; bc - CPX ext
00FE7A  7B12              :                 .byte   OP_JSR,     AM_EXT      ; bd - JSR ext
00FE7C  8112              :                 .byte   OP_LDS,     AM_EXT      ; be - LDS ext
00FE7E  B712              :                 .byte   OP_STS,     AM_EXT      ; bf - STS ext
                            
00FE80  BDB1              :                 .byte   OP_SUB,AM_B|AM_IMB      ; c0 - SUB B #imm
00FE82  57B1              :                 .byte   OP_CMP,AM_B|AM_IMB      ; c1 - CMP B #imm
00FE84  A8B1              :                 .byte   OP_SBC,AM_B|AM_IMB      ; c2 - SBC B #imm
00FE86  0000              :                 .byte   OP_ERR,     AM_INH      ; c3 -
00FE88  0CB1              :                 .byte   OP_AND,AM_B|AM_IMB      ; c4 - AND B #imm
00FE8A  24B1              :                 .byte   OP_BIT,AM_B|AM_IMB      ; c5 - BIT B #imm
00FE8C  7EB1              :                 .byte   OP_LDA,AM_B|AM_IMB      ; c6 - LDA B #imm
00FE8E  0000              :                 .byte   OP_ERR,     AM_INH      ; c7 -
00FE90  6CB1              :                 .byte   OP_EOR,AM_B|AM_IMB      ; c8 - EOR B #imm
00FE92  06B1              :                 .byte   OP_ADC,AM_B|AM_IMB      ; c9 - ADC B #imm
00FE94  90B1              :                 .byte   OP_ORA,AM_B|AM_IMB      ; ca - ORA B #imm
00FE96  09B1              :                 .byte   OP_ADD,AM_B|AM_IMB      ; cb - ADD B #imm

Portable Motorola 6800 Assembler [17.08]

00FE98  0000              :                 .byte   OP_ERR,     AM_INH      ; cc -
00FE9A  0000              :                 .byte   OP_ERR,     AM_INH      ; cd -
00FE9C  8402              :                 .byte   OP_LDX,     AM_IMW      ; ce - LDX #imm
00FE9E  DBB1              :                 .byte   OP_SYS,AM_B|AM_IMB      ; cf - *SYS B #imm
                            
00FEA0  BD81              :                 .byte   OP_SUB,AM_B|AM_DPG      ; d0 - SUB B dir
00FEA2  5781              :                 .byte   OP_CMP,AM_B|AM_DPG      ; d1 - CMP B dir
00FEA4  A881              :                 .byte   OP_SBC,AM_B|AM_DPG      ; d2 - SBC B dir
00FEA6  0000              :                 .byte   OP_ERR,     AM_INH      ; d3 -
00FEA8  0C81              :                 .byte   OP_AND,AM_B|AM_DPG      ; d4 - AND B dir
00FEAA  2481              :                 .byte   OP_BIT,AM_B|AM_DPG      ; d5 - BIT B dir
00FEAC  7E81              :                 .byte   OP_LDA,AM_B|AM_DPG      ; d6 - LDA B dir
00FEAE  B481              :                 .byte   OP_STA,AM_B|AM_DPG      ; d7 -STA B dir
00FEB0  6C81              :                 .byte   OP_EOR,AM_B|AM_DPG      ; d8 - EOR B dir
00FEB2  0681              :                 .byte   OP_ADC,AM_B|AM_DPG      ; d9 - ADC B dir
00FEB4  9081              :                 .byte   OP_ORA,AM_B|AM_DPG      ; da - ORA B bir
00FEB6  0981              :                 .byte   OP_ADD,AM_B|AM_DPG      ; db - ADD B dir
00FEB8  0000              :                 .byte   OP_ERR,     AM_INH      ; dc -
00FEBA  0000              :                 .byte   OP_ERR,     AM_INH      ; dd -
00FEBC  8401              :                 .byte   OP_LDX,     AM_DPG      ; de - LDX dir
00FEBE  BA01              :                 .byte   OP_STX,     AM_DPG      ; df - STX dir
                            
00FEC0  BD91              :                 .byte   OP_SUB,AM_B|AM_IDX      ; e0 - SUB B idx,X
00FEC2  5791              :                 .byte   OP_CMP,AM_B|AM_IDX      ; e1 - CMP B idx,X
00FEC4  A891              :                 .byte   OP_SBC,AM_B|AM_IDX      ; e2 - SBC B idx,X
00FEC6  0000              :                 .byte   OP_ERR,     AM_INH      ; e3 -
00FEC8  0C91              :                 .byte   OP_AND,AM_B|AM_IDX      ; e4 - AND B idx,X
00FECA  2491              :                 .byte   OP_BIT,AM_B|AM_IDX      ; e5 - BIT B idx,X
00FECC  7E91              :                 .byte   OP_LDA,AM_B|AM_IDX      ; e6 - LDA B idx,X
00FECE  B491              :                 .byte   OP_STA,AM_B|AM_IDX      ; e7 - STA B idx,X
00FED0  6C91              :                 .byte   OP_EOR,AM_B|AM_IDX      ; e8 - EOR B idx,X
00FED2  0691              :                 .byte   OP_ADC,AM_B|AM_IDX      ; e9 - ADC B idx,X
00FED4  9091              :                 .byte   OP_ORA,AM_B|AM_IDX      ; ea - ORA B idx,X
00FED6  0991              :                 .byte   OP_ADD,AM_B|AM_IDX      ; eb - ADD B idx,X
00FED8  0000              :                 .byte   OP_ERR,     AM_INH      ; ec -
00FEDA  0000              :                 .byte   OP_ERR,     AM_INH      ; ed -
00FEDC  8411              :                 .byte   OP_LDX,     AM_IDX      ; ee - LDX idx,X
00FEDE  BA11              :                 .byte   OP_STX,     AM_IDX      ; ef - STX idx,X
                            
00FEE0  BD92              :                 .byte   OP_SUB,AM_B|AM_EXT      ; f0 - SUB B ext
00FEE2  5792              :                 .byte   OP_CMP,AM_B|AM_EXT      ; f1 - CMP B ext
00FEE4  A892              :                 .byte   OP_SBC,AM_B|AM_EXT      ; f2 - SBC B ext
00FEE6  0000              :                 .byte   OP_ERR,     AM_INH      ; f3 -
00FEE8  0C92              :                 .byte   OP_AND,AM_B|AM_EXT      ; f4 - AND B ext
00FEEA  2492              :                 .byte   OP_BIT,AM_B|AM_EXT      ; f5 - BIT B ext
00FEEC  7E92              :                 .byte   OP_LDA,AM_B|AM_EXT      ; f6 - LDA B ext
00FEEE  B492              :                 .byte   OP_STA,AM_B|AM_EXT      ; f7 - STA B ext
00FEF0  6C92              :                 .byte   OP_EOR,AM_B|AM_EXT      ; f8 - EOR B ext
00FEF2  0692              :                 .byte   OP_ADC,AM_B|AM_EXT      ; f9 - ADC B ext
00FEF4  9092              :                 .byte   OP_ORA,AM_B|AM_EXT      ; fa - ORA B ext
00FEF6  0992              :                 .byte   OP_ADD,AM_B|AM_EXT      ; fb - ADD B ext
00FEF8  0000              :                 .byte   OP_ERR,     AM_INH      ; fc -
00FEFA  0000              :                 .byte   OP_ERR,     AM_INH      ; fd -
00FEFC  8412              :                 .byte   OP_LDX,     AM_EXT      ; fe - LDX ext

Portable Motorola 6800 Assembler [17.08]

00FEFE  BA12              :                 .byte   OP_STX,     AM_EXT      ; ff - STX ext
                            
                            MNEMONICS:
00FF00  3F3F3F4142414144> :                 .byte   "???","ABA","ADC","ADD"
00FF0C  414E4441534C4153> :                 .byte   "AND","ASL","ASR","BCC"
00FF18  4243534245514247> :                 .byte   "BCS","BEQ","BGE","BGT"
00FF24  424954424849424C> :                 .byte   "BIT","BHI","BLE","BLS"
00FF30  424C54424D49424E> :                 .byte   "BLT","BMI","BNE","BPL"
00FF3C  4252414253524256> :                 .byte   "BRA","BSR","BVC","BVS"
00FF48  434241434C43434C> :                 .byte   "CBA","CLC","CLI","CLR"
00FF54  434C56434D50434F> :                 .byte   "CLV","CMP","COM","CPX"
00FF60  4441414445434445> :                 .byte   "DAA","DEC","DES","DEX"
00FF6C  454F52494E43494E> :                 .byte   "EOR","INC","INS","INX"
00FF78  4A4D504A53524C44> :                 .byte   "JMP","JSR","LDA","LDS"
00FF84  4C44584C53524E45> :                 .byte   "LDX","LSR","NEG","NOP"
00FF90  4F52415053485055> :                 .byte   "ORA","PSH","PUL","ROL"
00FF9C  524F525254495254> :                 .byte   "ROR","RTI","RTS","SBA"
00FFA8  5342435345435345> :                 .byte   "SBC","SEC","SEI","SEV"
00FFB4  5354415354535354> :                 .byte   "STA","STS","STX","SUB"
00FFC0  5357495441425441> :                 .byte   "SWI","TAB","TAP","TBA"
00FFCC  5450415453545453> :                 .byte   "TPA","TST","TSX","TXS"
00FFD8  574149535953      :                 .byte   "WAI","SYS"
                            
00FFDE  57656576696C205B> : SPLASH:         .byte   "Weevil [17.08]"
00FFEC  0D0A04            : CRLF:           .byte   CR,LF,EOT
                            
                            ;===============================================================================
                            ; Vectors
                            ;-------------------------------------------------------------------------------
                            
                                            .org    $fff8
                            
00FFF8  E000              :                 .word   IRQ
00FFFA  E00A              :                 .word   SWI
00FFFC  E005              :                 .word   NMI
00FFFE  E400              :                 .word   RESET
                            
                                            .end


Portable Motorola 6800 Assembler [17.08]

Symbol Table

AM_A                             00000040  | AM_INH                           00000000 
AM_B                             00000080  | CMD_IFR                          00000000 
AM_DPG                           00000001  | OP_ERR                           00000000 
AM_EXT                           00000012  | AM_DPG                           00000001 
AM_IDX                           00000011  | CMD_IFW                          00000001 
AM_IMB                           00000031  | INT_100HZ                        00000001 
AM_IMW                           00000002  | AM_IMW                           00000002 
AM_INH                           00000000  | CMD_IER                          00000002 
AM_REL                           00000021  | INT_UART_RX                      00000002 
A_STR                            0000E528  | CMD_IEW                          00000003 
B_STR                            0000E52C  | OP_ABA                           00000003 
CMD_CLR                          00000006  | CMD_TXD                          00000004 
CMD_IER                          00000002  | EOT                              00000004 
CMD_IEW                          00000003  | INT_UART_TX                      00000004 
CMD_IFR                          00000000  | CMD_RXD                          00000005 
CMD_IFW                          00000001  | CMD_CLR                          00000006 
CMD_RXD                          00000005  | OP_ADC                           00000006 
CMD_TXD                          00000004  | OP_ADD                           00000009 
CR                               0000000D  | LF                               0000000A 
CRLF                             0000FFEC  | OP_AND                           0000000C 
DebugHandler                     0000E539  | CR                               0000000D 
DebugHandler.Skip                0000E543  | OP_ASL                           0000000F 
DummyHandler                     0000E41C  | AM_IDX                           00000011 
EOT                              00000004  | AM_EXT                           00000012 
FetchOpcode                      0000E4A2  | OP_ASR                           00000012 
FetchOpcode.Skip                 0000E4AD  | OP_BCC                           00000015 
INT_100HZ                        00000001  | OP_BCS                           00000018 
INT_UART_RX                      00000002  | OP_BEQ                           0000001B 
INT_UART_TX                      00000004  | OP_BGE                           0000001E 
IRQ                              0000E000  | AM_REL                           00000021 
IRQV                             0000A000  | OP_BGT                           00000021 
InChar                           0000E078  | OP_BIT                           00000024 
LF                               0000000A  | OP_BHI                           00000027 
MNEMONICS                        0000FF00  | OP_BLE                           0000002A 
MODE                             0000A00B  | OP_BLS                           0000002D 
MPTR                             0000A008  | OP_BLT                           00000030 
NMI                              0000E005  | AM_IMB                           00000031 
NMIV                             0000A002  | OP_BMI                           00000033 
OPCODE                           0000A00A  | OP_BNE                           00000036 
OPCODES                          0000FD00  | OP_BPL                           00000039 
OP_ABA                           00000003  | OP_BRA                           0000003C 
OP_ADC                           00000006  | OP_BSR                           0000003F 
OP_ADD                           00000009  | AM_A                             00000040 
OP_AND                           0000000C  | OP_BVC                           00000042 
OP_ASL                           0000000F  | OP_BVS                           00000045 
OP_ASR                           00000012  | OP_CBA                           00000048 
OP_BCC                           00000015  | OP_CLC                           0000004B 
OP_BCS                           00000018  | OP_CLI                           0000004E 
OP_BEQ                           0000001B  | OP_CLR                           00000051 
OP_BGE                           0000001E  | OP_CLV                           00000054 
OP_BGT                           00000021  | OP_CMP                           00000057 
OP_BHI                           00000027  | OP_COM                           0000005A 

Portable Motorola 6800 Assembler [17.08]

OP_BIT                           00000024  | OP_CPX                           0000005D 
OP_BLE                           0000002A  | OP_DAA                           00000060 
OP_BLS                           0000002D  | OP_DEC                           00000063 
OP_BLT                           00000030  | OP_DES                           00000066 
OP_BMI                           00000033  | OP_DEX                           00000069 
OP_BNE                           00000036  | OP_EOR                           0000006C 
OP_BPL                           00000039  | OP_INC                           0000006F 
OP_BRA                           0000003C  | OP_INS                           00000072 
OP_BSR                           0000003F  | OP_INX                           00000075 
OP_BVC                           00000042  | OP_JMP                           00000078 
OP_BVS                           00000045  | OP_JSR                           0000007B 
OP_CBA                           00000048  | OP_LDA                           0000007E 
OP_CLC                           0000004B  | AM_B                             00000080 
OP_CLI                           0000004E  | OP_LDS                           00000081 
OP_CLR                           00000051  | OP_LDX                           00000084 
OP_CLV                           00000054  | OP_LSR                           00000087 
OP_CMP                           00000057  | OP_NEG                           0000008A 
OP_COM                           0000005A  | OP_NOP                           0000008D 
OP_CPX                           0000005D  | OP_ORA                           00000090 
OP_DAA                           00000060  | OP_PSH                           00000093 
OP_DEC                           00000063  | OP_PUL                           00000096 
OP_DES                           00000066  | OP_ROL                           00000099 
OP_DEX                           00000069  | OP_ROR                           0000009C 
OP_EOR                           0000006C  | OP_RTI                           0000009F 
OP_ERR                           00000000  | OP_RTS                           000000A2 
OP_INC                           0000006F  | OP_SBA                           000000A5 
OP_INS                           00000072  | OP_SBC                           000000A8 
OP_INX                           00000075  | OP_SEC                           000000AB 
OP_JMP                           00000078  | OP_SEI                           000000AE 
OP_JSR                           0000007B  | OP_SEV                           000000B1 
OP_LDA                           0000007E  | OP_STA                           000000B4 
OP_LDS                           00000081  | OP_STS                           000000B7 
OP_LDX                           00000084  | OP_STX                           000000BA 
OP_LSR                           00000087  | OP_SUB                           000000BD 
OP_NEG                           0000008A  | OP_SWI                           000000C0 
OP_NOP                           0000008D  | OP_TAB                           000000C3 
OP_ORA                           00000090  | OP_TAP                           000000C6 
OP_PSH                           00000093  | OP_TBA                           000000C9 
OP_PUL                           00000096  | OP_TPA                           000000CC 
OP_ROL                           00000099  | OP_TST                           000000CF 
OP_ROR                           0000009C  | OP_TSX                           000000D2 
OP_RTI                           0000009F  | OP_TXS                           000000D5 
OP_RTS                           000000A2  | OP_WAI                           000000D8 
OP_SBA                           000000A5  | OP_SYS                           000000DB 
OP_SBC                           000000A8  | IRQV                             0000A000 
OP_SEC                           000000AB  | NMIV                             0000A002 
OP_SEI                           000000AE  | SWIV                             0000A004 
OP_SEV                           000000B1  | SP                               0000A006 
OP_STA                           000000B4  | MPTR                             0000A008 
OP_STS                           000000B7  | OPCODE                           0000A00A 
OP_STX                           000000BA  | MODE                             0000A00B 
OP_SUB                           000000BD  | TEMP                             0000A00C 
OP_SWI                           000000C0  | STACK                            0000A02E 
OP_SYS                           000000DB  | IRQ                              0000E000 

Portable Motorola 6800 Assembler [17.08]

OP_TAB                           000000C3  | NMI                              0000E005 
OP_TAP                           000000C6  | SWI                              0000E00A 
OP_TBA                           000000C9  | OutHexHi                         0000E067 
OP_TPA                           000000CC  | OutHexLo                         0000E06B 
OP_TST                           000000CF  | OutChar                          0000E075 
OP_TSX                           000000D2  | InChar                           0000E078 
OP_TXS                           000000D5  | OutStrLoop                       0000E07B 
OP_WAI                           000000D8  | OutStr                           0000E07E 
OutChar                          0000E075  | RESET                            0000E400 
OutHex2                          0000E49A  | RESET.Loop                       0000E419 
OutHexHi                         0000E067  | DummyHandler                     0000E41C 
OutHexLo                         0000E06B  | ShowPC                           0000E41D 
OutStr                           0000E07E  | ShowP                            0000E42E 
OutStrLoop                       0000E07B  | ShowBit                          0000E457 
P_STR                            0000E524  | ShowBit.Skip                     0000E45C 
RESET                            0000E400  | ShowA                            0000E45F 
RESET.Loop                       0000E419  | ShowB                            0000E46C 
SP                               0000A006  | ShowX                            0000E479 
SPLASH                           0000FFDE  | ShowSP                           0000E48A 
SP_STR                           0000E534  | OutHex2                          0000E49A 
STACK                            0000A02E  | FetchOpcode                      0000E4A2 
SWI                              0000E00A  | FetchOpcode.Skip                 0000E4AD 
SWIV                             0000A004  | ShowBytes                        0000E4C1 
ShowA                            0000E45F  | ShowBytes.Blank2                 0000E4E1 
ShowB                            0000E46C  | ShowBytes.Blank1                 0000E4E3 
ShowBit                          0000E457  | Space                            0000E4E7 
ShowBit.Skip                     0000E45C  | ShowOpcode                       0000E4EC 
ShowBytes                        0000E4C1  | ShowOpcode.SkipA                 0000E51A 
ShowBytes.Blank1                 0000E4E3  | ShowOpcode.SkipB                 0000E520 
ShowBytes.Blank2                 0000E4E1  | P_STR                            0000E524 
ShowOpcode                       0000E4EC  | A_STR                            0000E528 
ShowOpcode.SkipA                 0000E51A  | B_STR                            0000E52C 
ShowOpcode.SkipB                 0000E520  | X_STR                            0000E530 
ShowP                            0000E42E  | SP_STR                           0000E534 
ShowPC                           0000E41D  | DebugHandler                     0000E539 
ShowRegisters                    0000E545  | DebugHandler.Skip                0000E543 
ShowSP                           0000E48A  | ShowRegisters                    0000E545 
ShowX                            0000E479  | UartTx                           0000E562 
Space                            0000E4E7  | UartTx.Wait                      0000E563 
TEMP                             0000A00C  | UartRx                           0000E56D 
UartRx                           0000E56D  | OPCODES                          0000FD00 
UartTx                           0000E562  | MNEMONICS                        0000FF00 
UartTx.Wait                      0000E563  | SPLASH                           0000FFDE 
X_STR                            0000E530  | CRLF                             0000FFEC 
